local ESP = {}
local playersFolder = workspace:WaitForChild("Players")
local survivorsFolder = playersFolder:WaitForChild("Survivors")
local killersFolder = playersFolder:WaitForChild("Killers")
local ingameMapFolder = workspace:WaitForChild("Map"):WaitForChild("Ingame")

local addedESPs = {}
local connections = {}

local settings = {
    Survivors = false,
    Killers = false,
    Generators = false,
    Spikes = false,
    Items = false,
}

-- Billboard + highlight creation
local function createNameTag(adornee, text, color)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_NameTag"
    billboard.Adornee = adornee
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 100, 0, 30)
    billboard.StudsOffset = Vector3.new(0, 3, 0)

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = color
    label.TextStrokeTransparency = 0
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.Parent = billboard

    billboard.Parent = adornee
    return billboard
end

local function createHighlight(target, color)
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.FillColor = color
    highlight.OutlineColor = Color3.new(1, 1, 1)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Adornee = target
    highlight.Parent = target
    return highlight
end

local function addESP(object, color, label)
    if addedESPs[object] then return end
    local adornee = object:FindFirstChild("HumanoidRootPart") or (object:IsA("BasePart") and object)
    if not adornee then return end
    local tag = createNameTag(adornee, label or object.Name, color)
    local hl = createHighlight(object, color)
    addedESPs[object] = { NameTag = tag, Highlight = hl }

    local conn = object.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if addedESPs[object] then
                addedESPs[object].NameTag:Destroy()
                addedESPs[object].Highlight:Destroy()
                addedESPs[object] = nil
            end
            conn:Disconnect()
        end
    end)
    table.insert(connections, conn)
end

local function tryAdd(model, type)
    local colorMap = {
        Survivors = Color3.fromRGB(0, 255, 0),
        Killers = Color3.fromRGB(255, 0, 0),
        Generators = Color3.fromRGB(0, 150, 255),
        Spikes = Color3.fromRGB(255, 0, 0),
        Items = Color3.fromRGB(0, 150, 255),
    }
    local labelMap = {
        Generators = "GENERATOR",
        Spikes = "SPIKE",
        Items = model.Name,
    }

    if not settings[type] then return end
    addESP(model, colorMap[type], labelMap[type])
end

function ESP.EnableCategory(category)
    settings[category] = true
    ESP.Refresh()
end

function ESP.DisableCategory(category)
    settings[category] = false
    ESP.Refresh()
end

function ESP.Refresh()
    ESP.Disable() -- clear existing

    if settings.Survivors then
        for _, m in pairs(survivorsFolder:GetChildren()) do tryAdd(m, "Survivors") end
    end
    if settings.Killers then
        for _, m in pairs(killersFolder:GetChildren()) do tryAdd(m, "Killers") end
    end

    for _, obj in pairs(ingameMapFolder:GetDescendants()) do
        if settings.Generators and obj:IsA("Model") and obj.Name == "Generator" then
            tryAdd(obj, "Generators")
        elseif settings.Spikes and obj.Name == "Spike" then
            tryAdd(obj, "Spikes")
        elseif settings.Items and (obj.Name == "BloxyCola" or obj.Name == "Medkit") then
            tryAdd(obj, "Items")
        end
    end
end

function ESP.Disable()
    for _, c in pairs(connections) do c:Disconnect() end
    connections = {}

    for obj, data in pairs(addedESPs) do
        data.NameTag:Destroy()
        data.Highlight:Destroy()
        addedESPs[obj] = nil
    end
end

return ESP
